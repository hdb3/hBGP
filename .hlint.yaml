# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Warnings currently triggered by your code
- ignore: {name: "Use head"}
- ignore: {name: "Redundant bracket"}
- ignore: {name: "Use list literal pattern"}
- ignore: {name: "Too strict maybe"}
- ignore: {name: "Unused LANGUAGE pragma"}
- ignore: {name: "Use second"}
- ignore: {name: "Use $>"}
- ignore: {name: "Redundant do"}
- ignore: {name: "Use <$>"}
- ignore: {name: "Reduce duplication"}
- ignore: {name: "Use zipWith"}
- ignore: {name: "Use newtype instead of data"}
- ignore: {name: "Use first"}
- ignore: {name: "Use infix"}
- ignore: {name: "Use uncurry"}
- ignore: {name: "Eta reduce"}
- ignore: {name: "Redundant multi-way if"}
- ignore: {name: "Use fewer imports"}
- ignore: {name: "Redundant $"}
- ignore: {name: "Redundant fmap"}
- ignore: {name: "Use print"}
- ignore: {name: "Use map once"}
- ignore: {name: "Redundant id"}
- ignore: {name: "Use foldl"}
- ignore: {name: "Use tuple-section"}
- ignore: {name: "Redundant evaluate"}
- ignore: {name: "Use when"}
- ignore: {name: "Use reads"}
- ignore: {name: "Use bimap"}
- ignore: {name: "Move brackets to avoid $"}
- ignore: {name: "Use const"}
- ignore: {name: "Parse error"}
- ignore: {name: "Use lambda-case"}
- ignore: {name: "Redundant where"}
- ignore: {name: "Avoid lambda"}
- ignore: {name: "Use =="}


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]


# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
